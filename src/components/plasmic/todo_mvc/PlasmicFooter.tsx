// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dnxpBTDaNBSNN5x6ghTdfE
// Component: YD4BCNOdt6a
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: GoA4NafDjvA/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_todo_mvc.module.css"; // plasmic-import: dnxpBTDaNBSNN5x6ghTdfE/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: YD4BCNOdt6a/css

export type PlasmicFooter__VariantMembers = {
  state: "hasCompleted" | "singularLeft" | "empty";
};

export type PlasmicFooter__VariantsArgs = {
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
};

type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>("state");

export type PlasmicFooter__ArgsType = {
  count?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>("count");

export type PlasmicFooter__OverridesType = {
  footerContainer?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  count?: React.ReactNode;
  state?: MultiChoiceArg<"hasCompleted" | "singularLeft" | "empty">;
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.footerContainer
      )}
    >
      {(
        hasVariant(variants, "state", "empty")
          ? false
          : hasVariant(variants, "state", "singularLeft")
          ? true
          : hasVariant(variants, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__r83Jo, {
            [sty.freeBox__state_empty__r83JOzA1GX]: hasVariant(
              variants,
              "state",
              "empty"
            ),
            [sty.freeBox__state_hasCompleted__r83JouvTu]: hasVariant(
              variants,
              "state",
              "hasCompleted"
            ),
            [sty.freeBox__state_singularLeft__r83Joh7KmG]: hasVariant(
              variants,
              "state",
              "singularLeft"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "2",
            value: args.count,
            className: classNames(sty.slotTargetCount, {
              [sty.slotTargetCount__state_hasCompleted]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),
              [sty.slotTargetCount__state_singularLeft]: hasVariant(
                variants,
                "state",
                "singularLeft"
              )
            })
          })}

          {(hasVariant(variants, "state", "singularLeft") ? true : true) ? (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.text__ve9Pf,
                {
                  [sty.text__state_empty__ve9PfzA1GX]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  ),
                  [sty.text__state_hasCompleted__ve9PfUvTu]: hasVariant(
                    variants,
                    "state",
                    "hasCompleted"
                  ),
                  [sty.text__state_singularLeft__ve9PfH7KmG]: hasVariant(
                    variants,
                    "state",
                    "singularLeft"
                  )
                }
              )}
            >
              {hasVariant(variants, "state", "singularLeft")
                ? " item left"
                : " items left"}
            </div>
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__gaT5N)}
      >
        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__pu48Y)}
          state={"selected" as const}
        >
          {"All"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton___6PZ)}
        >
          {"Completed"}
        </ToggleButton>

        <ToggleButton
          className={classNames("__wab_instance", sty.toggleButton__ab4Rq)}
        >
          {"Active"}
        </ToggleButton>
      </p.Stack>

      {(hasVariant(variants, "state", "hasCompleted") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.text___2KqF1,
            {
              [sty.text__state_hasCompleted___2KqF1UvTu]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              )
            }
          )}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerContainer: ["footerContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  footerContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
